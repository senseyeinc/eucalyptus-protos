# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: compute_service.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from . import common_pb2 as common__pb2
from . import status_pb2 as status__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='compute_service.proto',
  package='senseye.compute',
  syntax='proto3',
  serialized_options=None,
  serialized_pb=_b('\n\x15\x63ompute_service.proto\x12\x0fsenseye.compute\x1a\x0c\x63ommon.proto\x1a\x0cstatus.proto\"f\n\x12VideoStreamRequest\x12,\n\x0cvideo_config\x18\x01 \x01(\x0b\x32\x14.senseye.VideoConfigH\x00\x12\x11\n\x07\x63ontent\x18\x02 \x01(\x0cH\x00\x42\x0f\n\rvideo_request\"W\n\x13VideoStreamResponse\x12\x1e\n\x05\x65rror\x18\x01 \x01(\x0b\x32\x0f.senseye.Status\x12 \n\x07results\x18\x02 \x03(\x0b\x32\x0f.senseye.Result\"K\n\x12VideoStaticRequest\x12\"\n\x08\x66\x65\x61tures\x18\x01 \x03(\x0e\x32\x10.senseye.Feature\x12\x11\n\tvideo_uri\x18\x02 \x01(\t2\xd1\x01\n\x07\x43ompute\x12\x63\n\x12\x41nalyzeVideoStream\x12#.senseye.compute.VideoStreamRequest\x1a$.senseye.compute.VideoStreamResponse(\x01\x30\x01\x12\x61\n\x12\x41nalyzeVideoStatic\x12#.senseye.compute.VideoStaticRequest\x1a$.senseye.compute.VideoStreamResponse0\x01\x62\x06proto3')
  ,
  dependencies=[common__pb2.DESCRIPTOR,status__pb2.DESCRIPTOR,])




_VIDEOSTREAMREQUEST = _descriptor.Descriptor(
  name='VideoStreamRequest',
  full_name='senseye.compute.VideoStreamRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='video_config', full_name='senseye.compute.VideoStreamRequest.video_config', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='content', full_name='senseye.compute.VideoStreamRequest.content', index=1,
      number=2, type=12, cpp_type=9, label=1,
      has_default_value=False, default_value=_b(""),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
    _descriptor.OneofDescriptor(
      name='video_request', full_name='senseye.compute.VideoStreamRequest.video_request',
      index=0, containing_type=None, fields=[]),
  ],
  serialized_start=70,
  serialized_end=172,
)


_VIDEOSTREAMRESPONSE = _descriptor.Descriptor(
  name='VideoStreamResponse',
  full_name='senseye.compute.VideoStreamResponse',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='error', full_name='senseye.compute.VideoStreamResponse.error', index=0,
      number=1, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='results', full_name='senseye.compute.VideoStreamResponse.results', index=1,
      number=2, type=11, cpp_type=10, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=174,
  serialized_end=261,
)


_VIDEOSTATICREQUEST = _descriptor.Descriptor(
  name='VideoStaticRequest',
  full_name='senseye.compute.VideoStaticRequest',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='features', full_name='senseye.compute.VideoStaticRequest.features', index=0,
      number=1, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='video_uri', full_name='senseye.compute.VideoStaticRequest.video_uri', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      serialized_options=None, file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  serialized_options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=263,
  serialized_end=338,
)

_VIDEOSTREAMREQUEST.fields_by_name['video_config'].message_type = common__pb2._VIDEOCONFIG
_VIDEOSTREAMREQUEST.oneofs_by_name['video_request'].fields.append(
  _VIDEOSTREAMREQUEST.fields_by_name['video_config'])
_VIDEOSTREAMREQUEST.fields_by_name['video_config'].containing_oneof = _VIDEOSTREAMREQUEST.oneofs_by_name['video_request']
_VIDEOSTREAMREQUEST.oneofs_by_name['video_request'].fields.append(
  _VIDEOSTREAMREQUEST.fields_by_name['content'])
_VIDEOSTREAMREQUEST.fields_by_name['content'].containing_oneof = _VIDEOSTREAMREQUEST.oneofs_by_name['video_request']
_VIDEOSTREAMRESPONSE.fields_by_name['error'].message_type = status__pb2._STATUS
_VIDEOSTREAMRESPONSE.fields_by_name['results'].message_type = common__pb2._RESULT
_VIDEOSTATICREQUEST.fields_by_name['features'].enum_type = common__pb2._FEATURE
DESCRIPTOR.message_types_by_name['VideoStreamRequest'] = _VIDEOSTREAMREQUEST
DESCRIPTOR.message_types_by_name['VideoStreamResponse'] = _VIDEOSTREAMRESPONSE
DESCRIPTOR.message_types_by_name['VideoStaticRequest'] = _VIDEOSTATICREQUEST
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

VideoStreamRequest = _reflection.GeneratedProtocolMessageType('VideoStreamRequest', (_message.Message,), {
  'DESCRIPTOR' : _VIDEOSTREAMREQUEST,
  '__module__' : 'compute_service_pb2'
  # @@protoc_insertion_point(class_scope:senseye.compute.VideoStreamRequest)
  })
_sym_db.RegisterMessage(VideoStreamRequest)

VideoStreamResponse = _reflection.GeneratedProtocolMessageType('VideoStreamResponse', (_message.Message,), {
  'DESCRIPTOR' : _VIDEOSTREAMRESPONSE,
  '__module__' : 'compute_service_pb2'
  # @@protoc_insertion_point(class_scope:senseye.compute.VideoStreamResponse)
  })
_sym_db.RegisterMessage(VideoStreamResponse)

VideoStaticRequest = _reflection.GeneratedProtocolMessageType('VideoStaticRequest', (_message.Message,), {
  'DESCRIPTOR' : _VIDEOSTATICREQUEST,
  '__module__' : 'compute_service_pb2'
  # @@protoc_insertion_point(class_scope:senseye.compute.VideoStaticRequest)
  })
_sym_db.RegisterMessage(VideoStaticRequest)



_COMPUTE = _descriptor.ServiceDescriptor(
  name='Compute',
  full_name='senseye.compute.Compute',
  file=DESCRIPTOR,
  index=0,
  serialized_options=None,
  serialized_start=341,
  serialized_end=550,
  methods=[
  _descriptor.MethodDescriptor(
    name='AnalyzeVideoStream',
    full_name='senseye.compute.Compute.AnalyzeVideoStream',
    index=0,
    containing_service=None,
    input_type=_VIDEOSTREAMREQUEST,
    output_type=_VIDEOSTREAMRESPONSE,
    serialized_options=None,
  ),
  _descriptor.MethodDescriptor(
    name='AnalyzeVideoStatic',
    full_name='senseye.compute.Compute.AnalyzeVideoStatic',
    index=1,
    containing_service=None,
    input_type=_VIDEOSTATICREQUEST,
    output_type=_VIDEOSTREAMRESPONSE,
    serialized_options=None,
  ),
])
_sym_db.RegisterServiceDescriptor(_COMPUTE)

DESCRIPTOR.services_by_name['Compute'] = _COMPUTE

# @@protoc_insertion_point(module_scope)
